# 新人エンジニアが知っておくべきプロジェクトマネージャーの仕事

## プロジェクトマネージャー（PM）の役割とは

プロジェクトマネージャーは「プロジェクトを成功に導く調整役」です。エンジニアが技術的な実装に集中できるよう、プロジェクト全体の進行管理やチーム運営を担当します。

**PMがいる理由**
- 個々のエンジニアが技術に集中できる環境作り
- プロジェクト全体の見通しと リスク管理
- ステークホルダー間の調整とコミュニケーション

## 主要業務の詳細解説

### 1. 朝会（デイリースタンドアップ）の進行管理

**朝会の目的**
- 昨日の進捗共有
- 今日の作業予定確認
- 課題・ブロッカーの早期発見

**PMの進行ポイント**
```markdown
## 朝会進行テンプレート（15分以内）

### 事前準備（5分前）
- [ ] 参加者の出席確認
- [ ] 前日の課題フォローアップ準備
- [ ] タスク管理ツールの最新状況確認

### 進行（各メンバー2-3分）
**質問項目:**
1. 昨日完了したタスクは？
2. 今日予定しているタスクは？
3. 困っていること・助けが必要なことは？

### まとめ（2-3分）
- [ ] 新たに発見された課題の整理
- [ ] 今日中に解決すべき事項の確認
- [ ] 次回までのアクション確認
```

**エンジニア側の協力ポイント**
- 事前にタスク状況を整理しておく
- 技術的な詰まりポイントを具体的に共有
- 他メンバーへの質問や相談を積極的に行う

### 2. 勤怠管理

**なぜ重要か**
- プロジェクトの工数計画に直結
- メンバーの体調管理とバーンアウト防止
- 法的コンプライアンスの遵守

**PMの管理項目**
```markdown
## 勤怠管理チェックリスト

### 日次チェック
- [ ] 遅刻・早退の把握と理由確認
- [ ] 残業時間の監視（月45時間以内）
- [ ] 体調不良者の状況フォロー

### 週次チェック
- [ ] 個人別労働時間の集計
- [ ] 有給取得促進の声かけ
- [ ] 長時間労働者との1on1実施

### 月次チェック
- [ ] 労働基準法遵守状況の確認
- [ ] チーム全体の稼働バランス調整
- [ ] 次月の工数計画見直し
```

**エンジニア側の協力ポイント**
- 勤怠記録を正確に入力
- 残業予定は事前に相談
- 体調不良時は早めに報告

### 3. 周知管理・進捗共有チャンネル管理

**情報共有の種類と方法**

```markdown
## 周知管理フレームワーク

### 緊急度・重要度別の周知方法

| 緊急度＼重要度 | 高重要度 | 低重要度 |
|---------------|----------|----------|
| **高緊急度** | Slack即座通知 + 口頭確認 | Slack通知 |
| **低緊急度** | 朝会 + 書面共有 | 週報・月報 |
```

### 進捗共有チャンネル管理

**進捗共有の目的**
- チーム全体の状況可視化
- 問題の早期発見・共有
- ナレッジの横展開
- 属人化の防止

**統一進捗報告テンプレート**

```markdown
## 日次進捗報告フォーマット

**2025/08/01（金）**

**①本日の進捗**
- [タスク名] 進捗率○○% 
- [タスク名] 完了
- [タスク名] 着手開始

**✅出来たこと**
- 具体的な成果物や完了したタスク
- 実装した機能の詳細
- 作成したドキュメント等

**💡分かったこと**
- 新しく学んだ技術・手法
- 効率的な作業方法の発見
- チーム内で共有すべき知見

**❓不明点**
- 技術的な疑問
- 仕様に関する不明確な点
- 作業進行上の判断に迷う部分

**🚨困りごと**
- 作業を阻害している問題
- 解決に他者の協力が必要な課題
- スケジュールに影響しそうな事項

**📢その他報告事項**
- スケジュール変更
- 会議・打ち合わせ予定
- チーム全体に関わる情報
```

**Good例の進捗報告**
```
2025/08/01（金）

①本日の進捗
- [ユーザー管理機能] パスワードリセット機能 90%完了
- [API開発] ユーザー認証エンドポイント 完了
- [テスト] 単体テスト環境構築 着手開始

✅出来たこと
- パスワードリセットのメール送信機能実装
- JWT認証のトークン生成・検証ロジック完成
- テスト用DBの初期データ作成スクリプト完成

💡分かったこと
- bcryptのハッシュ化処理は非同期で実装する必要がある
- JWTの有効期限は短めに設定し、リフレッシュトークンと併用が良い
- Jestのモック機能でDBアクセスを効率的にテストできる

❓不明点
- パスワードリセットURLの有効期限は何分が適切？
- 本番環境でのメール送信サービス（SES設定）の確認方法
- 認証失敗時のレート制限実装は必要？

🚨困りごと
- 開発環境のRedisが午後2時頃から不安定（接続エラー頻発）
- 外部認証サービスとの連携テストで想定より時間がかかっている

📢その他報告事項
- 明日午前中に顧客向けデモ準備のため、認証画面のUI調整予定
- セキュリティ関連のベストプラクティスをまとめたドキュメントをWikiに作成中
```

**PMの進捗管理フォローアップ**
```markdown
## PMの日次進捗確認フロー

### 17:30 - 進捗投稿チェック
- [ ] 全メンバーの投稿確認
- [ ] 未投稿者への催促
- [ ] 緊急対応が必要な困りごとの特定

### 18:00 - 対応アクション決定
**不明点への対応**
1. 即座に回答可能 → Slackで即回答
2. 調査が必要 → 担当者アサイン・期限設定
3. 外部確認必要 → ステークホルダーへ確認依頼

**困りごとへの対応**
1. 技術的問題 → シニアエンジニアと連携
2. 環境・ツール問題 → インフラチーム連携
3. リソース不足 → 工数調整・外部リソース検討

### 翌朝 - 朝会準備
- [ ] 前日の課題解決状況確認
- [ ] 当日の重点フォロー項目整理
- [ ] チーム全体に共有すべき情報抽出
```

**エンジニア側の進捗報告ポイント**
- **正直な報告**: 遅れも含めて正確に
- **具体的な記述**: 「順調」ではなく具体的成果を明記
- **問題の早期共有**: 小さな困りごとも共有
- **ナレッジ共有**: 学びや気づきを積極的に共有
- **フォーマット遵守**: チーム全体の可読性向上のため

### 4. メンバーの困りごとサポート

**困りごとの種類と対応**

```markdown
## 困りごと対応フレームワーク

### 技術的な困りごと
**対応手順:**
1. 問題の具体化（5W1H）
2. 解決策の検討（本人 → チーム → 外部）
3. 解決までの期限設定
4. 進捗の定期確認

**エスカレーション基準:**
- 1日で解決の目処が立たない
- プロジェクトスケジュールに影響
- セキュリティ・品質に関わる

### 人間関係の困りごと
**対応手順:**
1. 1on1での状況ヒアリング
2. 当事者間の調整
3. 必要に応じて上司・HRへ相談
4. フォローアップ

### 業務量・スケジュールの困りごと
**対応手順:**
1. 現在のタスク量の可視化
2. 優先順位の再調整
3. 他メンバーへの分散検討
4. スケジュール見直し
```

**エンジニア側の協力ポイント**
- 困りごとは早めに相談（我慢しない）
- 具体的な状況を整理して相談
- 提案された解決策は素直に試してみる

### 5. レビュー提出物の確認

**レビュー確認の観点**

```markdown
## レビュー確認チェックリスト

### 技術的品質
- [ ] コーディング規約に準拠している
- [ ] テストが適切に実装されている
- [ ] セキュリティ要件を満たしている
- [ ] パフォーマンス要件をクリアしている

### プロセス品質
- [ ] 設計書との整合性が取れている
- [ ] レビューコメントが適切に反映されている
- [ ] 必要なドキュメントが更新されている
- [ ] デプロイ手順が明確になっている

### プロジェクト品質
- [ ] スケジュール通りに完了している
- [ ] 品質基準を満たしている
- [ ] ステークホルダーの要件を満たしている
- [ ] 運用・保守を考慮した実装になっている
```

**PMの確認プロセス**
```markdown
## レビュー確認フロー

1. **技術レビュー完了の確認**
   - シニアエンジニアによるコードレビュー完了
   - 指摘事項の対応完了

2. **品質チェック**
   - 自動テスト結果の確認
   - 手動テスト結果の確認
   - 品質ゲートの通過確認

3. **ビジネス要件チェック**
   - 仕様書との整合性確認
   - ステークホルダー要件の充足確認

4. **リリース判定**
   - 総合的な品質評価
   - リリース可否の決定
```

**エンジニア側の協力ポイント**
- レビュー依頼時に必要な情報を添付
- レビューコメントは迅速に対応
- 自己チェックを十分に行ってから提出

## PMとエンジニアの効果的な協働方法

### 1. コミュニケーションのベストプラクティス

```markdown
## 効果的な報告・連絡・相談

### 報告（進捗共有）
**Good例:**
「ユーザー認証機能の実装が完了しました。
テストも問題なく、明日統合テストに進めます。」

**Bad例:**
「できました。」

### 連絡（情報共有）
**Good例:**
「AWSのメンテナンスが〇〇日にあります。
影響範囲は〇〇で、対応策として〇〇を検討しています。」

### 相談（判断を仰ぐ）
**Good例:**
「〇〇の実装で2つの方法があります。
A案：〇〇（メリット・デメリット）
B案：〇〇（メリット・デメリット）
どちらが良いでしょうか？」
```

### 2. 問題発生時の対応

```markdown
## インシデント対応フロー

### エンジニア側（第一発見者）
1. **即座に状況共有**
   - Slackでアラート
   - 影響範囲の概算報告

2. **初期対応**
   - 緊急回避策の実施
   - 詳細調査の開始

3. **継続報告**
   - 30分ごとの進捗報告
   - 解決見込み時間の共有

### PM側
1. **影響度判定**
   - ビジネスインパクトの評価
   - エスカレーション要否の判断

2. **リソース調整**
   - 追加人員の投入判断
   - 他タスクの優先度調整

3. **ステークホルダー対応**
   - 顧客・上司への報告
   - 対外的な謝罪・説明
```

## 実践で使えるツールとテンプレート

### 1. タスク管理ツールの活用

```markdown
## Jira/Trello活用例

### タスクの書き方
**タイトル:** [機能名] 具体的な作業内容
**説明:** 
- 背景・目的
- 受け入れ条件
- 参考資料のリンク

**例:**
タイトル: [ユーザー管理] パスワードリセット機能の実装
説明:
- 背景: ユーザーからパスワードを忘れた際の要望が多い
- 受け入れ条件: メール認証による安全なリセット機能
- 参考: 設計書#123, セキュリティガイドライン#456
```

### 2. 1on1ミーティングテンプレート

```markdown
## 1on1議事録テンプレート

### 基本情報
- 日時: 2025/08/01 14:00-14:30
- 参加者: [PM名], [エンジニア名]

### 今週の振り返り
- 良かったこと:
- 困ったこと:
- 来週への改善点:

### キャリア・スキル開発
- 現在の興味・関心:
- 挑戦したいこと:
- 必要なサポート:

### 次回アクション
- [ ] [具体的なアクション] - 担当者: [名前] - 期限: [日付]

### その他
- 要望・提案:
- PMへのフィードバック:
```

## まとめ：新人エンジニアへのアドバイス

**PMとの良好な関係を築くために**

1. **積極的なコミュニケーション**
   - 困った時は早めに相談
   - 進捗は正直に報告
   - 疑問点は遠慮なく質問

2. **プロジェクト全体を意識**
   - 自分のタスクが全体に与える影響を考える
   - 他メンバーとの連携を大切にする
   - 品質とスケジュールのバランスを意識

3. **成長に向けた姿勢**
   - フィードバックを素直に受け入れる
   - 新しいことに挑戦する意欲を示す
   - 自分なりの改善提案をする

4. **進捗共有の効果的な活用**
   - 毎日の振り返りを習慣化
   - 学びや困りごとを積極的に共有
   - 他メンバーの投稿から学ぶ姿勢

PMの仕事を理解することで、より効果的にプロジェクトに貢献できるようになります。PMは「管理する人」ではなく「サポートする人」です。特に進捗共有チャンネルは、チーム全体の成長と連携を促進する重要なツールです。お互いに協力してプロジェクトを成功に導きましょう！
