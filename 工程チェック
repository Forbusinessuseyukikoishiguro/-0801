# 開発工程セルフチェックシート
**～各工程で決めておかないと後で困るポイント集～**

## 使い方
- 各工程の開始時・中間・完了時にチェック
- 「後工程への影響」を意識して優先度を判断
- チーム全体で共有して認識合わせに活用

---

## 📋 要件定義工程

### 🎯 機能要件の明確化
- [ ] **何を作るかが具体的に決まっている**
  - **後で困ること**: 開発中に「仕様が違う」と言われる
  - **確認方法**: 機能一覧をステークホルダーに説明して合意取得
  - **完了基準**: ユーザーストーリー/ユースケースが明文化されている

- [ ] **画面/帳票の項目・レイアウトが決まっている**
  - **後で困ること**: 設計・開発が進んでから大幅変更が発生
  - **確認方法**: モックアップやワイヤーフレームでイメージ共有
  - **完了基準**: 画面遷移図と項目定義書が承認されている

- [ ] **データの入出力形式が明確**
  - **後で困ること**: 連携システムとの整合性がとれない
  - **確認方法**: サンプルデータでの突き合わせ
  - **完了基準**: インターフェース仕様書が関係者間で合意済み

### 🚀 非機能要件の定義
- [ ] **性能要件が数値で決まっている**
  - **後で困ること**: リリース直前に「遅すぎる」と判明
  - **確認方法**: 同時接続数、レスポンス時間の具体的数値設定
  - **完了基準**: 性能テストの合格基準が明文化されている

- [ ] **可用性・保守性要件が明確**
  - **後で困ること**: 運用開始後に対応できない障害が発生
  - **確認方法**: SLA（サービスレベル合意）の策定
  - **完了基準**: 運用体制と障害対応手順が決定している

- [ ] **セキュリティ要件が定義されている**
  - **後で困ること**: 後からセキュリティ対応で大規模修正
  - **確認方法**: セキュリティチェックリストとの照合
  - **完了基準**: セキュリティ方針書が承認されている

### 📅 プロジェクト制約の明確化
- [ ] **スケジュール・予算・スコープが確定**
  - **後で困ること**: 途中で「できません」となる
  - **確認方法**: WBS（作業分解構造）での工数見積もり
  - **完了基準**: プロジェクト計画書が正式承認されている

---

## 🏗️ 設計工程

### 🎨 システム設計
- [ ] **システム全体のアーキテクチャが決定**
  - **後で困ること**: 開発中に根本的な設計変更が必要になる
  - **確認方法**: アーキテクチャレビューの実施
  - **完了基準**: システム構成図とアーキテクチャ文書が承認済み

- [ ] **データベース設計が完了**
  - **後で困ること**: 開発後期にテーブル構造の大幅変更
  - **確認方法**: ER図とテーブル定義書のレビュー
  - **完了基準**: 正規化とパフォーマンスの両方を考慮した設計

- [ ] **API設計・インターフェース設計が確定**
  - **後で困ること**: システム間連携で仕様齟齬が発生
  - **確認方法**: API仕様書での突き合わせ会議
  - **完了基準**: OpenAPI等で仕様が文書化されている

### 🔧 技術選定
- [ ] **開発言語・フレームワークが決定**
  - **後で困ること**: 開発中に技術的制約で要件が実現できない
  - **確認方法**: POC（概念実証）の実施
  - **完了基準**: 技術選定理由書が文書化されている

- [ ] **開発環境・本番環境の構成が決定**
  - **後で困ること**: 環境差異により本番でバグが多発
  - **確認方法**: 環境構築手順書の作成・検証
  - **完了基準**: CI/CDパイプラインが構築されている

- [ ] **ライブラリ・ミドルウェアのライセンス確認**
  - **後で困ること**: リリース直前にライセンス問題が発覚
  - **確認方法**: ライセンス一覧表の作成・法務確認
  - **完了基準**: 使用許諾が得られている

### 📐 詳細設計
- [ ] **画面設計・処理フロー設計が完了**
  - **後で困ること**: 開発中に操作性の問題が判明
  - **確認方法**: プロトタイプでのユーザビリティテスト
  - **完了基準**: 画面設計書とフロー図が承認済み

- [ ] **エラーハンドリング設計が完了**
  - **後で困ること**: 想定外エラーでシステムが停止
  - **確認方法**: 異常系シナリオの網羅的洗い出し
  - **完了基準**: エラー処理一覧とメッセージ定義が完成

---

## 💻 開発工程

### 🔨 実装
- [ ] **コーディング規約が策定・周知されている**
  - **後で困ること**: レビューでの指摘が多発、品質のばらつき
  - **確認方法**: 静的解析ツールでの自動チェック
  - **完了基準**: チーム全員が規約を理解・遵守している

- [ ] **コードレビュー体制が確立**
  - **後で困ること**: バグが大量に混入、保守性が低下
  - **確認方法**: レビュー観点とプロセスの明文化
  - **完了基準**: 全コードがレビューを通過している

- [ ] **ユニットテストが十分に作成されている**
  - **後で困ること**: 結合テストでバグが大量発覚
  - **確認方法**: カバレッジ率の測定（80%以上目標）
  - **完了基準**: 自動テストが CI/CD に組み込まれている

### 📚 ドキュメント作成
- [ ] **運用・保守に必要なドキュメントが整備**
  - **後で困ること**: 運用開始後にシステムが理解できない
  - **確認方法**: 運用チームによるドキュメントレビュー
  - **完了基準**: 運用手順書・トラブルシューティング手順が完成

- [ ] **ユーザーマニュアルが作成されている**
  - **後で困ること**: ユーザーが使い方が分からずサポート殺到
  - **確認方法**: 実際のユーザーによる操作確認
  - **完了基準**: マニュアルなしで基本操作ができることを確認

---

## 🧪 テスト工程

### ✅ テスト計画・実施
- [ ] **テスト観点・項目が網羅的に定義**
  - **後で困ること**: 本番でテストしていない組み合わせでバグ発生
  - **確認方法**: テストマトリクス・デシジョンテーブルでの整理
  - **完了基準**: 正常系・異常系・境界値が全て網羅されている

- [ ] **本番環境と同等の環境でテスト実施**
  - **後で困ること**: 環境差異により本番でのみ発生するバグ
  - **確認方法**: 環境差異一覧表での比較
  - **完了基準**: ステージング環境での全機能確認完了

- [ ] **性能テスト・負荷テストが実施済み**
  - **後で困ること**: 本番稼働後に性能問題が発覚
  - **確認方法**: 想定負荷の120%での動作確認
  - **完了基準**: 要件定義の性能基準をクリア

### 🔍 受入テスト
- [ ] **ユーザー受入テストが完了**
  - **後で困ること**: リリース後に「想定と違う」と言われる
  - **確認方法**: 実際の業務シナリオでのテスト実施
  - **完了基準**: ユーザーからの正式な受入承認取得

- [ ] **セキュリティテストが実施済み**
  - **後で困ること**: 本番稼働後にセキュリティ脆弱性が発覚
  - **確認方法**: ペネトレーションテストや脆弱性診断
  - **完了基準**: セキュリティチェックリストの全項目クリア

---

## 🚀 リリース工程

### 📦 リリース準備
- [ ] **本番リリース手順が詳細に作成されている**
  - **後で困ること**: リリース作業中にトラブルが発生
  - **確認方法**: ステージング環境でのリリース手順確認
  - **完了基準**: 手順書通りに作業して問題ないことを確認

- [ ] **ロールバック手順が準備されている**
  - **後で困ること**: 問題発生時に元に戻せない
  - **確認方法**: ロールバック手順の事前検証
  - **完了基準**: 15分以内に前バージョンに戻せることを確認

- [ ] **リリース後の監視・確認項目が定義**
  - **後で困ること**: 問題に気づくのが遅れて影響拡大
  - **確認方法**: 監視項目リストとアラート設定の確認
  - **完了基準**: 自動監視とマニュアル確認項目が整備済み

### 🎯 本番リリース
- [ ] **段階的リリース（カナリアリリース等）を実施**
  - **後で困ること**: 全ユーザーに一斉に影響が及ぶ
  - **確認方法**: 一部ユーザーでの先行リリース
  - **完了基準**: 段階的に問題ないことを確認してから全展開

- [ ] **関係者への影響・手順の事前連絡完了**
  - **後で困ること**: リリース時に関係者が対応できない
  - **確認方法**: 事前説明会とQ&Aセッションの実施
  - **完了基準**: 全関係者がリリース内容と手順を理解

---

## 🔧 運用工程

### 📊 監視・保守
- [ ] **システム監視体制が確立**
  - **後で困ること**: 障害発生に気づかず影響拡大
  - **確認方法**: 監視ツールとアラート設定の動作確認
  - **完了基準**: 24時間365日の監視体制構築

- [ ] **定期メンテナンス計画が策定**
  - **後で困ること**: システム劣化による予期しない障害
  - **確認方法**: メンテナンス項目とスケジュールの明文化
  - **完了基準**: 年間保守計画書が承認されている

- [ ] **バックアップ・復旧手順が確立**
  - **後で困ること**: データ消失時に復旧できない
  - **確認方法**: 実際のバックアップからの復旧テスト実施
  - **完了基準**: RTO・RPO要件を満たす復旧手順の確立

### 🆕 継続的改善
- [ ] **ユーザーフィードバック収集の仕組み確立**
  - **後で困ること**: ユーザーの不満が蓄積して利用率低下
  - **確認方法**: フィードバックチャネルとプロセスの整備
  - **完了基準**: 定期的なユーザー満足度調査の実施

- [ ] **システム改善・機能追加の計画策定**
  - **後で困ること**: 技術的負債の蓄積、競争力低下
  - **確認方法**: 改善要望の優先度付けとロードマップ作成
  - **完了基準**: 次期バージョンの開発計画が承認済み

---

## 🎯 工程横断チェック項目

### 📋 プロジェクト管理
- [ ] **各工程の完了基準（Definition of Done）が明確**
  - **確認方法**: チーム全員での完了基準の合意
  - **重要度**: ★★★

- [ ] **リスク管理が継続的に実施されている**
  - **確認方法**: リスクレジスターの定期更新
  - **重要度**: ★★★

- [ ] **ステークホルダーとの定期的なコミュニケーション**
  - **確認方法**: 定期報告会の実施
  - **重要度**: ★★☆

### 🔄 品質管理
- [ ] **各工程での品質ゲートが設定されている**
  - **確認方法**: 品質基準とレビュープロセスの明文化
  - **重要度**: ★★★

- [ ] **トレーサビリティが確保されている**
  - **確認方法**: 要件→設計→実装→テストの紐づけ確認
  - **重要度**: ★★☆

---

## 📈 チェック結果の活用方法

### 🚨 優先度の判断基準
- **★★★ 必須**: この工程で決めないと後で大きな影響
- **★★☆ 重要**: 早めに決めておくと後の工程がスムーズ  
- **★☆☆ 推奨**: 決めておくと品質・効率が向上

### 💡 改善アクション
1. **未完了項目の洗い出し**: チェックできていない項目を特定
2. **影響度分析**: 後工程への影響度を評価
3. **対策検討**: 解決方法と担当者・期限を決定
4. **進捗管理**: 定期的にフォローアップ

### 📊 活用シーン
- **工程開始時**: その工程で重点的にチェックすべき項目の確認
- **工程完了時**: 次工程に進んで良いかの判断
- **プロジェクト振り返り**: 問題の根本原因分析
- **次回プロジェクト**: 経験を活かした改善点の反映

---

*このチェックシートは定期的に見直し、プロジェクトの特性に合わせてカスタマイズしてください。*
