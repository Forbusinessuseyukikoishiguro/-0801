# 開発・テスト中の障害発生時の対応方法　新人エンジニア向け解説

## 開発現場での「試験中の障害」とは

**よくある障害シーン**
- 単体テスト実行中にシステムが停止
- 結合テスト中にデータが消失
- 本番リリース前の最終確認でエラー発生
- 負荷テスト中にサーバーがダウン

## 基本的な対応フロー

### 1. 【即座にやること】（1-2分以内）

**🚨 まず最初に**
```markdown
## 初動対応チェックリスト

### 即座に実行（パニックにならない）
- [ ] 深呼吸をして冷静になる
- [ ] 現在時刻をメモ（障害発生時刻の記録）
- [ ] 画面のスクリーンショット撮影
- [ ] エラーメッセージをコピー保存

### 被害拡大防止
- [ ] 他の人が同じ操作をしないよう声かけ
- [ ] テスト実行を一時停止
- [ ] 自動実行中のジョブがあれば停止
```

**新人がやりがちなNG行動**
- ❌ 慌ててブラウザを再読み込み（証拠が消える）
- ❌ 「何もしてないのに壊れた」と言う
- ❌ 一人で何時間も悩む
- ❌ エラー画面を閉じてしまう

### 2. 【状況整理・報告】（5分以内）

**整理すべき情報**
```markdown
## 障害状況整理テンプレート

### 基本情報
- 発生日時: 2025/08/01 14:30頃
- 作業者: 自分の名前
- 実行していたテスト: 〇〇機能のテスト
- 使用環境: 開発環境/テスト環境/ステージング環境

### 症状
- 何をしたときに: ログインボタンをクリックしたとき
- どうなったか: 画面が真っ白になった
- エラーメッセージ: "Internal Server Error 500"
- 再現性: 毎回発生/時々発生/1回だけ

### 影響範囲
- 影響する機能: ログイン機能全体
- 他の人への影響: チーム全員がテストできない状態
- データへの影響: 不明（要調査）
```

**報告先の判断**
```markdown
## エスカレーション判断基準

### 即座に先輩・リーダーに報告
- [ ] 本番環境に影響する可能性
- [ ] データ損失の可能性
- [ ] 他メンバーの作業に影響
- [ ] セキュリティに関わる問題

### 自分で調査してから報告（15分以内）
- [ ] 明らかに自分のミス
- [ ] 開発環境での軽微な問題
- [ ] 過去に同じ問題が起きている
```

### 3. 【初期調査】（15-30分）

**調査の進め方**
```markdown
## 新人でもできる初期調査

### Step1: ログ確認
**確認場所:**
- ブラウザの開発者ツール（F12）→ Console
- アプリケーションのログファイル
- データベースのエラーログ

**見るべきポイント:**
- 赤字のエラーメッセージ
- 発生時刻が最近のもの
- "ERROR"や"FATAL"という文字

### Step2: 再現確認
**確認方法:**
1. 全く同じ操作をもう一度実行
2. 違うブラウザで同じ操作
3. 違うテストデータで同じ操作

**記録すること:**
- 再現する条件
- 再現しない条件
- 発生タイミングのパターン

### Step3: 影響範囲確認
**確認項目:**
- 同じ機能の他の操作は正常？
- 関連する機能は正常？
- データは正しく保存されている？
```

**調査時の注意点**
```markdown
## 調査時のDo's & Don'ts

### ✅ やるべきこと
- 調査内容を記録しながら進める
- 分からない用語はメモして後で質問
- 小さな変化も見逃さず記録

### ❌ やってはいけないこと
- 推測だけで決めつける
- 証拠を残さずに修正作業を始める
- 本番データを使って実験する
- 他人のコードを勝手に修正する
```

### 4. 【チームと連携した対応】

**効果的な相談の仕方**
```markdown
## 先輩への相談テンプレート

「〇〇さん、お疲れ様です。
テスト中に問題が発生したので相談させてください。

【状況】
- 時刻: 14:30頃
- 作業: ユーザー登録機能のテスト
- 症状: 登録ボタンクリック後にエラー画面

【調査結果】
- エラーログ: "Database connection failed"
- 再現性: 毎回発生
- 影響: 新規ユーザー登録ができない状態

【質問】
1. このエラーの一般的な原因は何でしょうか？
2. 私が次にすべき調査はありますか？
3. 緊急度はどの程度でしょうか？

スクリーンショットとログを添付します。」
```

**チーム作業での協力**
```markdown
## チーム連携ポイント

### 情報共有
- Slack/Teams等で障害状況を共有
- 調査分担の相談
- 進捗の定期報告（30分ごと）

### 役割分担例
- 新人: ログ調査、再現テスト
- 先輩: コード調査、データベース確認
- リーダー: 顧客・管理職への報告

### 作業の並行実施
- 原因調査と応急措置を並行
- 複数の仮説を同時に検証
- 復旧作業の準備を事前に実施
```

### 5. 【解決・復旧作業】

**修正作業の進め方**
```markdown
## 安全な修正作業手順

### 事前準備
1. **バックアップ作成**
   - 現在のコード状態をコミット
   - データベースのバックアップ取得
   - 設定ファイルのコピー作成

2. **修正計画の策定**
   - 修正内容の明確化
   - 影響範囲の確認
   - テスト計画の作成

### 修正実施
1. **小さな単位で修正**
   - 一度に複数箇所を変更しない
   - 修正後は必ず動作確認
   - 各段階でコミット

2. **動作確認**
   - 修正した機能のテスト
   - 関連機能への影響確認
   - データ整合性の確認

### 完了確認
1. **全体テストの実施**
   - 正常系のテスト
   - 異常系のテスト
   - 性能への影響確認

2. **ドキュメント更新**
   - 修正内容の記録
   - テスト結果の記録
   - 今後の注意点をメモ
```

### 6. 【振り返り・改善】

**事後の振り返り**
```markdown
## 障害対応振り返りシート

### 今回の障害について
- **原因**: 何が根本原因だったか？
- **発見**: どうやって原因を特定できたか？
- **解決**: どんな方法で解決したか？

### プロセスの振り返り
- **良かった点**: 今回うまくいったこと
- **改善点**: 次回もっと早く対応するには？
- **学び**: 新しく覚えた知識・スキル

### 再発防止策
- **技術的対策**: コード・設定の改善
- **プロセス改善**: 手順・チェック方法の見直し
- **スキルアップ**: 身につけるべき知識

### アクション計画
- [ ] 〇〇について勉強する
- [ ] 〇〇の手順書を作成する
- [ ] 〇〇の監視を強化する
```

## 障害種類別の対応ポイント

### パターン1: データ関連の問題

```markdown
## データ障害時の注意点

### 初動対応
- **即座にデータ変更を停止**
- **現在のデータ状態をバックアップ**
- **影響範囲の特定**

### 調査手順
1. どのテーブル/ファイルが影響を受けたか
2. いつから問題が発生していたか
3. 正常なバックアップはいつ時点まであるか

### 復旧方針
- バックアップからの復旧
- 手動でのデータ修正
- 処理の再実行
```

### パターン2: 環境・設定の問題

```markdown
## 環境障害時の対応

### よくある原因
- 設定ファイルの記述ミス
- 環境変数の未設定
- ポート番号の競合
- 権限設定の不備

### 調査のコツ
- 最後に変更した設定を確認
- 他の環境との設定差分を比較
- ログで起動シーケンスを追跡
```

### パターン3: パフォーマンス問題

```markdown
## 性能問題時の対応

### 症状の確認
- レスポンス時間の測定
- リソース使用率の確認
- ボトルネックの特定

### 応急措置
- 負荷の軽い処理に変更
- 同時実行数の制限
- キャッシュの活用
```

## 新人エンジニアへのアドバイス

### 💡 心構え

**1. 障害は学習の機会**
- 怖がらずに積極的に調査
- 分からないことは素直に質問
- 同じ問題の再発防止を考える

**2. チームワークを大切に**
- 一人で抱え込まない
- 情報共有を積極的に行う
- 他の人の調査から学ぶ

**3. 記録を残す習慣**
- 対応過程をドキュメント化
- 解決方法を共有する
- 失敗も含めて記録する

### 🛠️ スキルアップのコツ

**技術面**
- ログの読み方を覚える
- デバッグツールの使い方を習得
- 監視・計測ツールに慣れる

**プロセス面**
- 障害対応手順の理解
- エスカレーション基準の把握
- コミュニケーション方法の改善

障害対応は最初は大変ですが、経験を積むことで確実にスキルアップできます。焦らず、チームと協力して取り組んでいきましょう！
